= Log4jruby

* https://github.com/lenny/log4jruby

== Description:

Log4jruby is a thin wrapper around {Log4j}[http://logging.apache.org/log4j]. 
It is usable much like {Log4r}[http://log4r.rubyforge.org] however your logging 
is configurable via traditional log4j methods(i.e. with your java logging configuration). 
This can be very useful if you are building ruby software on top of 
Java(i.e. calling and extending your Java classes via JRuby) and already use 
log4j for your java logging.

Log4jruby makes it so you can log through log4j using something that looks mostly like 
the standard ruby Logger. Filename, line number, and method name are made available to
your appender layout via {MDC}[http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html].

The root Log4jruby logger is .jruby 

    log4j.appender.Ruby=org.apache.log4j.ConsoleAppender
    log4j.appender.Ruby.layout=org.apache.log4j.PatternLayout
    log4j.appender.Ruby.layout.ConversionPattern=%5p %.50X{fileName} %X{methodName}:%X{lineNumber} - %m%n

    log4j.logger.jruby=info,Ruby
    log4j.logger.jruby.MyClass=debug

NativeExceptions and Ruby Exceptions are logged with stack traces.

=== Examples

	require 'log4jruby'

	logger = Log4jruby::Logger.get('test', :trace => true, :level => :debug)

	logger.debug("hello world")

	class MyClass
	  def initialize
	    @logger = Log4jruby::Logger.get(self.class.name, :level => :debug, :trace => true)
	  end
  
	  def foo
	    @logger.debug("hello from foo")
	    raise "foo error"
	  end

	  def bar
	    @logger.debug("hello from bar")
	    foo
	  end

	  def baz
	    @logger.debug("hello from baz")
	    begin
	      bar
	    rescue => e
	      @logger.error(e)
	    end
	  end
	end

	o = MyClass.new
	o.baz

	logger.debug("changing log level for MyClass to ERROR directly through log4j")

 	myclass_logger = Log4jruby::Logger['MyClass']
 	myclass_logger.level = :error

	logger.debug("calling baz again")
	o.baz
	
	Outputs:
	
	DEBUG examples/simple.rb :7 - hello world
	DEBUG examples/simple.rb baz:25 - hello from baz
	DEBUG examples/simple.rb bar:20 - hello from bar
	DEBUG examples/simple.rb foo:15 - hello from foo
	ERROR examples/simple.rb baz:29 - foo error
	  examples/simple.rb:16:in `foo'
	  examples/simple.rb:21:in `bar'
	  examples/simple.rb:27:in `baz'
	  examples/simple.rb:35
	DEBUG examples/simple.rb :37 - changing log level for MyClass to ERROR directly through log4j
	DEBUG examples/simple.rb :42 - calling baz again
	ERROR examples/simple.rb baz:29 - foo error
	  examples/simple.rb:16:in `foo'
	  examples/simple.rb:21:in `bar'
	  examples/simple.rb:27:in `baz'
	  examples/simple.rb:43
	
Mix It In

	class MyClass
	  include Log4jruby::LoggerForClass
  
	  class << self
	    def my_class_method
	      logger.info("hello from class method")
	    end
	  end
  
	  def my_method
	    logger.info("hello from instance method")
	  end
	end
	
	INFO examples/logger_per_class.rb my_class_method:11 - hello from class method
	INFO examples/logger_per_class.rb my_method:16 - hello from instance method
	

== Installation

	Just the source code for now.
